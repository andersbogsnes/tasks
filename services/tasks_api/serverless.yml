service: tasks-api
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: python3.11
  region: eu-north-1
  stage: ${opt:stage, 'development'}
  logRetentionInDays: 90
  environment:
    APP_ENVIRONMENT: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt:
                - TasksAPITable
                - Arn
            - "Fn::Join": [ '/', [ "Fn::GetAtt": [ TasksAPITable, Arn ], 'index', '*' ] ]

functions:
  API:
    handler: tasks_api.handle
    timeout: 10
    memorySize: 512
    events:
      - http:
          path: /{proxy+}
          method: any
          cors:
            origin: ${env:ALLOWED_ORIGINS}
            maxAge: 60
          authorizer:
            name: TasksAPIAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

custom:
  pythonRequirements:
    noDeploy:
      - boto3
      - botocore
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-tasks-api

package:
  patterns:
    - '!venv/**'
    - '!README.md'
    - '!.pytest_cache/**'
    - '!.ruff_cache/**'
    - '!.node_modules/**'

plugins:
  - serverless-python-requirements

resources:
  - ${file(resources/cognito.yml)}
  - ${file(resources/dynamodb.yaml)}